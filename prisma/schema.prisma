// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  doctors  Doctor[]
  patients Patient[]
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  password              String
  name                  String
  role                  Role
  phone                 String?
  dateOfBirth           DateTime?
  gender                Gender?
  occupation            String?
  maritalStatus         MaritalStatus?
  emergencyContact      String?
  nextOfKin             String?
  nextOfKinRelationShip String?
  doctor                Doctor?
  patient               Patient?
  messagesSent          Message[]      @relation("SentMessages")
  messagesReceived      Message[]      @relation("ReceivedMessages")
  conversations         Conversation[] @relation("ConversationParticipants")
}

model Doctor {
  id               Int           @id @default(autoincrement())
  specialty        String
  userId           Int?          @unique
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospitalId       Int
  hospital         Hospital      @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  appointments     Appointment[]
  assignedPatients Patient[]
  reviews          Review[]
  licenseNumber    String?
  employmentDate   DateTime?
  qualifications   String?
  certifications   String?
  languages        String?

  TreatmentPlan TreatmentPlan[]
}

model Patient {
  id                    Int             @id @default(autoincrement())
  userId                Int             @unique
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospitalId            Int
  hospital              Hospital        @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  appointments          Appointment[]
  assignedDoctors       Doctor[]
  reviews               Review[]
  familyConditions      String?
  allergies             String?
  pastMedicalConditions String?
  alcoholConsumption    String?
  bloodGroup            String?
  genotype              String?
  currentMedications    String?
  vaccinationHistory    String?
  surgicalHistory       String?
  socialHistory         String?
  weight                String?
  height                String?
  TreatmentPlan         TreatmentPlan[]
}

model Appointment {
  id        Int      @id @default(autoincrement())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId Int
  date      DateTime
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  content   String
  createdAt DateTime @default(now())
  patientId Int
  patient   Patient  @relation(fields: [patientId], references: [id])
  doctorId  Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  senderId       Int
  receiverId     Int
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  identifier   String    @unique
  createdAt    DateTime  @default(now())
}

model TreatmentPlan {
  id          Int             @id @default(autoincrement())
  title       String
  patientId   Int
  patient     Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId    Int?
  doctor      Doctor?         @relation(fields: [doctorId], references: [id], onDelete: SetNull)
  medications Medication[]
  status      TreatmentStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Medication {
  id           Int                 @id @default(autoincrement())
  treatmentId  Int
  treatment    TreatmentPlan       @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  name         String
  dosage       String
  frequency    String
  duration     String
  startDate    DateTime
  instructions String?
  completed    Boolean             @default(false)
  history      MedicationHistory[]
}

model MedicationHistory {
  id            Int        @id @default(autoincrement())
  medicationId  Int
  medication    Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  changeDate    DateTime   @default(now())
  changeDetails String
}

enum Role {
  DOCTOR
  PATIENT
  HOSPITAL
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  DIVORCED
  MARRIED
  WIDOWED
}

enum TreatmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}
